package com.numbers.jttp.response;

import com.numbers.jttp.mapper.*;
import java.io.*;
import java.util.logging.*;
import org.apache.http.client.methods.*;

/**
 * an implementation of the JsonHttpReponse that represents a failed HTTP
 * response (HTTP error code) with the option to map the JSON response (if any)
 * to another type for better error handling.
 *
 * @author Numbers
 * @param <T> The type response to which the JSON response is mapped to, if it
 *            had been successful.
 */
class FailedGenericHttpResponse<T> extends BasicHttpResponse implements JsonHttpResponse<T> {

    private final JsonMapper mapper;
    private final InputStream stream;

    /**
     * the cached version of the object generated by mapToErrorResponse, should
     * that method be called multiple times. It is also used to check if the
     * mapToErrorMessage has been called, so that close will not try to close an
     * already closed stream.
     * <p>
     */
    private Object errorResponse;

    /**
     * Creates a failed HTTP response with a
     * {@link com.numbers.jttp.mapper.JsonMapper JsonMpper} to map the error
     * response from the {@link java.io.InputStream inputstream}.
     *
     * @param response the response generated by the HTTP request
     * @param mapper   the objectMapper to map the error response
     */
    FailedGenericHttpResponse(CloseableHttpResponse response,
                                     JsonMapper mapper)
    {
        super(response);

        this.mapper = mapper;
        try {
            this.stream = response.getEntity().getContent();
        } catch (IOException | UnsupportedOperationException ex) {
            Logger.getLogger(FailedGenericHttpResponse.class.getName())
                    .log(Level.SEVERE, null, ex);
            throw new RuntimeException(ex);
        }
    }

    @Override
    public T getResponse() throws IllegalStateException
    {
        throw new IllegalStateException("response contains failure code");
    }

    @Override
    public <U> U mapToErrorResponse(Class<U> errorClass) throws
            UnsupportedOperationException, IllegalStateException
    {
        if (errorResponse == null) {
            errorResponse = mapper.readValue(stream, errorClass);
        }
        return (U) errorResponse;
    }

    @Override
    public void close() throws IOException
    {
        if (errorResponse == null) {
            stream.close();
        }
    }

}
